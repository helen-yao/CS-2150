C00A  000		jmp	start	skip around variables
003F  001	a	dw	3F	int a[] 
0000  002	n	dw	0	int n
0000  003	zero	dw	0
0001  004	one	dw	1
4000  005	storit	dw	4000
0000  006	i	dw	0
0000  007	v	dw	0
3000  008	loadit	dw	3000
0000  009
1000  00A	start	readH		get value n and store it
4002  00B		store	n
3003  00C		load	zero
4006  00D		store	i
3002  00E	loop	load	n	
6006  00F		sub	i
E01E  010		jmpl	xit	if(i>=n) goto xit
D01E  011		jumpe	xit	
1000  012		readH		get value in array
4007  013		store	v	stores user input
3005  014		load	storit	calculate right memory address
5001  015		add	a
5006  016		add	i
4019  017		store	doit	puts it into doit
3007  018		load	v
0000  019	doit	dw	0
3006  01A		load	i
5004  01B		add	one
4006  01C		store	i
C00E  01D		jmp	loop	goto loop
3003  01E	xit	load	zero	make i = 0 to iterate
4006  01F		store	i
3002  020	loop	load	n	if(i>=n) goto xit
6006  021		sub	i
E02E  022		jmpl	xit	
D02E  023		jumpe	xit	
3008  024		load	loadit
5001  025		add	a
5006  026		add	i
4028  027		store	doit	
0000  028	doit	dw	0
1800  029		printH
3006  02A		load	i
5004  02B		add	one
4006  02C		store	i
C020  02D		jmp	loop
3002  02E	xit	load	n
6004  02F		sub	one
4006  030		store	i
3006  031		load	i
E03D  032	loop	jmpl	halt	
3008  033		load	loadit
5001  034		add	a
5006  035		add	i
4037  036		store	doit	
0000  037	doit	dw	
1800  038		printH
3006  039		load	i
6004  03A		sub	one
4006  03B		store	i
C032  03C		jmp	loop	
0000  03D	halt